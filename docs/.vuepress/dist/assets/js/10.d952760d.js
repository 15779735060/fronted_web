(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{282:function(t,v,_){"use strict";_.r(v);var r=_(14),a=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h4",{attrs:{id:"string新增方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string新增方法"}},[t._v("#")]),t._v(" String新增方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("原型方法")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("includes(str)")]),t._v(" "),v("td",[t._v("返回布尔值，判断是否找到参数字符串")])]),t._v(" "),v("tr",[v("td",[t._v("startsWith(str)")]),t._v(" "),v("td",[t._v("返回布尔值，判断参数字符串是否在原字符串的头部")])]),t._v(" "),v("tr",[v("td",[t._v("endsWith(str)")]),t._v(" "),v("td",[t._v("返回布尔值，判断参数字符串是否在原字符串的尾部")])]),t._v(" "),v("tr",[v("td",[t._v("repeat(int)")]),t._v(" "),v("td",[t._v("返回新的字符串，表示将字符串重复指定次数返回")])]),t._v(" "),v("tr",[v("td",[t._v("padStart(start,str)")]),t._v(" "),v("td",[t._v("返回新的字符串，表示用参数字符串从头部（左侧）补全原字符串")])]),t._v(" "),v("tr",[v("td",[t._v("padEnd(start,str)")]),t._v(" "),v("td",[t._v("返回新的字符串，表示用参数字符串从尾部（右侧）补全原字符串")])])])]),t._v(" "),v("h4",{attrs:{id:"number新增方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#number新增方法"}},[t._v("#")]),t._v(" Number新增方法")]),t._v(" "),v("p",[t._v("  这里讲到的方法会包含Math对象的方法，但由于有些方法不常用（其实是我不会用😄），故只罗列出部分Math方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("原型方法")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("isFinite(int)")]),t._v(" "),v("td",[t._v("用于检查一个数值是否为有限的（ finite ），即不是 Infinity")])]),t._v(" "),v("tr",[v("td",[t._v("parseInt(str or int)")]),t._v(" "),v("td",[t._v("用于将给定字符串转化为指定进制的整数。")])]),t._v(" "),v("tr",[v("td",[t._v("Math.trunc(int)")]),t._v(" "),v("td",[t._v("用于返回数字的整数部分。")])]),t._v(" "),v("tr",[v("td",[t._v("Math.sign(int)")]),t._v(" "),v("td",[t._v("判断数字的符号（正、负、0）")])]),t._v(" "),v("tr",[v("td",[t._v("Math.abs(int)")]),t._v(" "),v("td",[t._v("获取绝对值")])]),t._v(" "),v("tr",[v("td",[t._v("Math.ceil(int)")]),t._v(" "),v("td",[t._v("向上取整")])]),t._v(" "),v("tr",[v("td",[t._v("Math.floor(int)")]),t._v(" "),v("td",[t._v("向上下取整")])]),t._v(" "),v("tr",[v("td",[t._v("Math.round(int)")]),t._v(" "),v("td",[t._v("四舍五入")])]),t._v(" "),v("tr",[v("td",[t._v("Math.random(int)")]),t._v(" "),v("td",[t._v("返回随机数")])]),t._v(" "),v("tr",[v("td",[t._v("Math.max(str)")]),t._v(" "),v("td",[t._v("获取一组数据中的最大值")])]),t._v(" "),v("tr",[v("td",[t._v("Math.min(str)")]),t._v(" "),v("td",[t._v("获取一组数据中的最小值")])]),t._v(" "),v("tr",[v("td",[t._v("Math.PI")]),t._v(" "),v("td",[t._v("获取圆周率π的值，返回值是3.141592653589793")])])])]),t._v(" "),v("h4",{attrs:{id:"object新增方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#object新增方法"}},[t._v("#")]),t._v(" Object新增方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("原型方法")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("assign(target,obj,obj)")]),t._v(" "),v("td",[t._v("用于将源对象的所有可枚举属性复制到目标对象中。如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性")])]),t._v(" "),v("tr",[v("td",[t._v("is(val,val)")]),t._v(" "),v("td",[t._v("用来比较两个值是否严格相等，与（===）效果一样")])])])]),t._v(" "),v("h4",{attrs:{id:"array新增方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#array新增方法"}},[t._v("#")]),t._v(" Array新增方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("原型方法")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("of(...val)")]),t._v(" "),v("td",[t._v("将参数中所有值作为元素形成数组。Array.of(1, 2, 3, 4)//[1, 2, 3, 4]")])]),t._v(" "),v("tr",[v("td",[t._v("from(arr or obj)")]),t._v(" "),v("td",[t._v("将类数组对象或可迭代对象转化为数组。( Array.from([1, 2])//[1, 2] ) or ( Array.from({0: '1',1: '2',2: 3,length: 3})//['1', '2', 3] )")])]),t._v(" "),v("tr",[v("td",[t._v("of(...val)")]),t._v(" "),v("td",[t._v("将参数中所有值作为元素形成数组。Array.of(1, 2, 3, 4)//[1, 2, 3, 4]")])]),t._v(" "),v("tr",[v("td",[t._v("find(function)")]),t._v(" "),v("td",[t._v("查找数组中符合条件的元素,若查找到则立即返回元素。")])]),t._v(" "),v("tr",[v("td",[t._v("findIndex(function)")]),t._v(" "),v("td",[t._v("查找数组中符合条件的元素,若查找到则立即返回该元素的下标。")])]),t._v(" "),v("tr",[v("td",[t._v("entries()")]),t._v(" "),v("td",[t._v("遍历键值对。for(let [key, value] of ['a', 'b'].entries())")])]),t._v(" "),v("tr",[v("td",[t._v("keys()")]),t._v(" "),v("td",[t._v("遍历键名。for(let key of ['a', 'b'].keys())")])]),t._v(" "),v("tr",[v("td",[t._v("values()")]),t._v(" "),v("td",[t._v("for(let value of ['a', 'b'].values())")])]),t._v(" "),v("tr",[v("td",[t._v("includes(function)")]),t._v(" "),v("td",[t._v("检测数组是否包含指定值，返回一个布尔值")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);