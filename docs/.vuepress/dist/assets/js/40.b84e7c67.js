(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{312:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"javascript变量声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript变量声明"}},[t._v("#")]),t._v(" JavaScript变量声明")]),t._v(" "),s("p",[t._v("  在JavaScript，有三种声明变量的方式，分别是var、let、const，需要注意的是，在es6以前，只有var一种方式，其他两种方式是es6的规范。")]),t._v(" "),s("h4",{attrs:{id:"var详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var详解"}},[t._v("#")]),t._v(" var详解")]),t._v(" "),s("p",[t._v("  在es6以前，只有这var这一种声明方式，但是存在着一些弊端，如存在变量提升、没有块级作用域等。(变量提升：只js在运行的时候，只要声明了var变量，只自动把这块代码的执行提升到函数头部进行的，换句话说，var可以先使用在声明，这样其实是非常不严谨的。)。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不规范的写法，但是也能拿到值，这就是变量提升")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("h4",{attrs:{id:"let详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let详解"}},[t._v("#")]),t._v(" let详解")]),t._v(" "),s("p",[t._v("  let是es6出的一种新声明方式，let的出现解决了var的弊端，它不存在着变量提升，并且有块级作用域。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//错误的写法")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("h4",{attrs:{id:"const详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const详解"}},[t._v("#")]),t._v(" const详解")]),t._v(" "),s("p",[t._v("  const其实跟let一样，但有一点要注意，const是声明常量的。就是const一经声明，值不可以被修改，但引用数据类型除外，至于原因在下一章会讲。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//错误的写法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\ncount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);