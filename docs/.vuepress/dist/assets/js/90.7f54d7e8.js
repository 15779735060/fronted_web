(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{365:function(e,t,a){"use strict";a.r(t);var r=a(14),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"响应式原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[e._v("#")]),e._v(" 响应式原理")]),e._v(" "),t("p",[e._v("  vue的响应式原理实际上就是在observe上对data数据进行递归遍历，给每一个data属性绑定一个Object.defineproperty，进行依赖收集和派发更新。")]),e._v(" "),t("h3",{attrs:{id:"依赖收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖收集"}},[e._v("#")]),e._v(" 依赖收集")]),e._v(" "),t("p",[e._v("  首先，Object.defindProptey中getter的时候，实例化一个Dep方法，然后判断Dep.target是否为watcher，如果是watcher，会调用Dep.target的depend方法，并把Dep实例传进去，在Watcher的depend中会调用addDep，把Dep实例push到Watcher的deps数组中，然后又会调用Dep.addSub方法，把Watcher加入到Dep实例的subs数组中。总的来说，"),t("strong",[e._v("就是一个相互收集的过程，wathcer收集Dep，而Dep又会去收集Watcher")])]),e._v(" "),t("h3",{attrs:{id:"在什么时候进行依赖收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在什么时候进行依赖收集"}},[e._v("#")]),e._v(" 在什么时候进行依赖收集?")]),e._v(" "),t("p",[e._v("  在模板编译的时候，会把指令解析成一个directive对象，加入到des数组中。然后遍历des数组，调用directive中的bind方法，实例化一个Watcher，并设置Dep.target，最后调用Watcher.get方法，触发依赖收集")]),e._v(" "),t("h3",{attrs:{id:"派发更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#派发更新"}},[e._v("#")]),e._v(" 派发更新")]),e._v(" "),t("p",[e._v("  在修改data数据的时候，会触发Object.defineproperty的setter方法，调用Dep里面的notify方法，遍历subs数组中的Watcher，调用Watcher中的update方法，实现页面的更新")])])}),[],!1,null,null,null);t.default=s.exports}}]);